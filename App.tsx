
import React, { useState, useCallback } from 'react';
import { GameState, TriviaQuestion } from './types';
import { fetchTriviaQuestion } from './services/geminiService';
import StartScreen from './components/StartScreen';
import QuestionCard from './components/QuestionCard';
import EndScreen from './components/EndScreen';
import LoadingSpinner from './components/LoadingSpinner';
import { RushLogo } from './components/IconComponents';

const TOTAL_QUESTIONS = 5;

const App: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>(GameState.START);
  const [questions, setQuestions] = useState<TriviaQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadQuestions = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const newQuestions: TriviaQuestion[] = [];
      // Using a set to avoid duplicate questions from the LLM in a single session
      const questionTexts = new Set<string>();
      
      while(newQuestions.length < TOTAL_QUESTIONS) {
        const question = await fetchTriviaQuestion();
        if (!questionTexts.has(question.question)) {
          newQuestions.push(question);
          questionTexts.add(question.question);
        }
      }
      setQuestions(newQuestions);
      setCurrentQuestionIndex(0);
      setScore(0);
      setGameState(GameState.PLAYING);
    } catch (err) {
      setError('Failed to fetch trivia questions. Please try again later.');
      console.error(err);
      setGameState(GameState.START);
    } finally {
      setIsLoading(false);
    }
  }, []);

  const startGame = () => {
    loadQuestions();
  };
  
  const handleAnswer = (isCorrect: boolean) => {
    if (isCorrect) {
      setScore(prev => prev + 1);
    }
    
    setTimeout(() => {
        const nextQuestion = currentQuestionIndex + 1;
        if (nextQuestion < TOTAL_QUESTIONS) {
            setCurrentQuestionIndex(nextQuestion);
        } else {
            setGameState(GameState.FINISHED);
        }
    }, 2000); // Wait 2 seconds before showing the next question to show feedback
  };

  const handlePlayAgain = () => {
    setGameState(GameState.START);
    setQuestions([]);
  };
  
  const renderContent = () => {
    if (isLoading) {
        return <LoadingSpinner />;
    }

    switch (gameState) {
      case GameState.START:
        return <StartScreen onStart={startGame} error={error} />;
      case GameState.PLAYING:
        if (questions.length > 0) {
          return (
            <QuestionCard
              question={questions[currentQuestionIndex]}
              onAnswer={handleAnswer}
              questionNumber={currentQuestionIndex + 1}
              totalQuestions={TOTAL_QUESTIONS}
            />
          );
        }
        return null;
      case GameState.FINISHED:
        return <EndScreen score={score} totalQuestions={TOTAL_QUESTIONS} onPlayAgain={handlePlayAgain} />;
      default:
        return <StartScreen onStart={startGame} />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-slate-800 text-white font-sans flex flex-col items-center justify-center p-4">
      <header className="mb-8 text-center">
        <div className="mb-6 relative">
          <img 
            src="/images/Rush2026RedStar2.png" 
            alt="Rush Rock Trivia Logo" 
            className="max-w-md h-auto mx-auto"
            style={{
              maskImage: 'radial-gradient(ellipse at center, black 25%, rgba(0,0,0,0.7) 40%, rgba(0,0,0,0.4) 55%, rgba(0,0,0,0.15) 70%, rgba(0,0,0,0.05) 85%, transparent 100%)',
              WebkitMaskImage: 'radial-gradient(ellipse at center, black 25%, rgba(0,0,0,0.7) 40%, rgba(0,0,0,0.4) 55%, rgba(0,0,0,0.15) 70%, rgba(0,0,0,0.05) 85%, transparent 100%)'
            }}
          />
        </div>
        <h1 className="text-4xl md:text-5xl font-bold tracking-wider text-white drop-shadow-[0_2px_2px_rgba(0,0,0,0.8)]">
          Rock Trivia
        </h1>
      </header>
      <main className="w-full max-w-2xl">
        {renderContent()}
      </main>
      <footer className="mt-8 text-center text-gray-400 text-sm">
        <p>A tribute to Geddy, Alex, and Neil.</p>
        <p>Questions generated by Google's Gemini AI.</p>
      </footer>
    </div>
  );
};

export default App;
